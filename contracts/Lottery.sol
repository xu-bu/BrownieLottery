// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@chainlink/contracts/src/v0.6/VRFConsumerBase.sol";

contract Lottery is Ownable, VRFConsumerBase {
    // since players need to pay entrance fee, we have to add payable for storing their addresses
    address payable[] public players;
    address payable public recentWinner;
    uint256 public usdEntryFee;
    AggregatorV3Interface internal ethPriceFeed;
    enum LOTTERY_STATE {
        OPEN,
        CLOSED,
        CALCULATING_WINNER
    }
    LOTTERY_STATE public lotteryState;
    uint256 public fee;
    bytes32 public keyhash;
    event RequestedRandomness(bytes32 requestId);
    uint256 public randomNum;

    // inherit VRFConsumerBase to get random number
    constructor(
        address _priceFeedAddress,
        address _vrfCoordinator,
        address _link,
        uint256 _fee,
        bytes32 _keyhash
    ) public VRFConsumerBase(_vrfCoordinator, _link) {
        usdEntryFee = 50 * (10 ** 18);
        ethPriceFeed = AggregatorV3Interface(_priceFeedAddress);
        lotteryState = LOTTERY_STATE.CLOSED;
    }

    function enter() public payable {
        require(lotteryState == LOTTERY_STATE.OPEN);
        require(msg.value >= getEntranceFee(), "not enough ETH for entry fee");
        players.push(msg.sender);
    }

    // the unit is eth wei
    function getEntranceFee() public view returns (uint256) {
        (, int price, , , ) = ethPriceFeed.latestRoundData();
        uint256 adjustedPrice = uint256(price) * 10 ** 10; // 18 decimals
        uint256 costToEnter = (usdEntryFee * 10 ** 18) / adjustedPrice;
        return costToEnter;
    }

    // since we've already imported Ownable.sol, we don't need to write modifier onlyOwner anymore
    function startLottery() public onlyOwner {
        require(
            lotteryState == LOTTERY_STATE.CLOSED,
            "error occurs when trying to start a new lottery"
        );
        lotteryState = LOTTERY_STATE.OPEN;
    }

    function endLottery() public onlyOwner {
        lotteryState = LOTTERY_STATE.CALCULATING_WINNER;
        // invoke requestRandomness to request off-chain server to generate random number, the random number will be provided in "fulfillRandomness" function as a parameter, which means we only need to override fulfillRandomness to proceed subsequent operations
        bytes32 requestId=requestRandomness(keyhash, fee);
        // emit requestId for test
        emit RequestedRandomness(requestId);
    }

    // _randomness is the random number generated by off-chain server
    function fulfillRandomness(bytes32 _requestId, uint256 _randomness) internal override{
        randomNum=_randomness;
        require(lotteryState==LOTTERY_STATE.CALCULATING_WINNER,"fulfillRandomness error");
        require(_randomness>0,"random not found in Lottery.sol-fulfillRandomness");
        uint256 index=_randomness/players.length;
        recentWinner=players[index];
        // the winner will get the entire balance of this contract
        recentWinner.transfer(address(this).balance);
        // reset lottery
        players=new address payable[](0);
        lotteryState=LOTTERY_STATE.CLOSED;
    }
}
